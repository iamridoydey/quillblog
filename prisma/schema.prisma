generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User schema
model User {
  id            String   @id @default(uuid())
  firstName     String
  lastName      String?
  username      String   @unique
  email         String   @unique
  password      String
  profilePic    String?
  title         String?
  bio           String?
  createdAt     DateTime @default(now())
  posts         Post[]
  blogs         Blog[]
  blogPosts     BlogPost[]
  comments      Comment[]
  following     UserFollow[]   @relation("Following")
  followers     UserFollow[]   @relation("Followers")
  followedBlogs UserFollowsBlog[]
  @@index([username])
}

// Blog schema
model Blog {
  id          String   @id @default(uuid())
  userId      String
  shortName   String   @unique
  title       String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  blogPosts   BlogPost[]
  blogTags    BlogTag[]
  followers   UserFollowsBlog[]
  @@index([shortName])
}

// BlogPost schema
model BlogPost {
  id          String   @id @default(uuid())
  userId      String
  blogId      String
  title       String
  thumbnail   String?
  content     Json     @default("{}")
  likes       Int      @default(0)
  comments    Comment[]
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  blog        Blog     @relation(fields: [blogId], references: [id])
  blogPostTags BlogPostTag[]
  @@index([userId])
}

// Post schema
model Post {
  id        String   @id @default(uuid())
  userId    String
  thumbnail String?
  content   Json     @default("{}")
  likes     Int      @default(0)
  comments  Comment[]
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  postTags  PostTag[]
}

// Comment schema
model Comment {
  id         String   @id @default(uuid())
  userId     String
  postId     String?
  blogPostId String?
  content    Json     @default("{}")
  likes      Int      @default(0)
  isEdited   Boolean  @default(false)
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  post       Post?    @relation(fields: [postId], references: [id])
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
}

// Tag schema
model Tag {
  id           String   @id @default(uuid())
  name         String   @unique
  blogTags     BlogTag[]
  postTags     PostTag[]
  blogPostTags BlogPostTag[]
  @@index([name])
}

// Join table for Blog and Tag
model BlogTag {
  blogId  String
  tagId   String
  blog    Blog @relation(fields: [blogId], references: [id])
  tag     Tag  @relation(fields: [tagId], references: [id])
  @@id([blogId, tagId])
}

// Join table for BlogPost and Tag
model BlogPostTag {
  blogPostId String
  tagId      String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])
  @@id([blogPostId, tagId])
}

// Join table for Post and Tag
model PostTag {
  postId String
  tagId  String
  post   Post @relation(fields: [postId], references: [id])
  tag    Tag  @relation(fields: [tagId], references: [id])
  @@id([postId, tagId])
}

// Follow relationship between users
model UserFollow {
  followerId String
  followedId String
  createdAt  DateTime @default(now())
  follower   User     @relation("Following", fields: [followerId], references: [id])
  followed   User     @relation("Followers", fields: [followedId], references: [id])
  @@id([followerId, followedId])
}

// Follow relationship between users and blogs
model UserFollowsBlog {
  userId String
  blogId String
  user   User @relation(fields: [userId], references: [id])
  blog   Blog @relation(fields: [blogId], references: [id])
  @@unique([userId, blogId])
}
